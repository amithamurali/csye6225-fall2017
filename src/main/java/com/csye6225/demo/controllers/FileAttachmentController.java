/**
 * Amitha_Murali, 001643826, murali.a@husky.neu.edu
 * Jyoti Sharma, 001643410, sharma.j@husky.neu.edu
 * Surabhi Patil, 001251860, patil.sur@husky.neu.edu
 **/

package com.csye6225.demo.controllers;

import com.csye6225.demo.dao.FileAttachmentRepository;
import com.csye6225.demo.dao.TaskRepository;
import com.csye6225.demo.entities.FileAttachment;
import com.csye6225.demo.entities.Task;
import com.csye6225.demo.helpers.Helper;
import com.google.gson.JsonObject;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.net.URL;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;

@Controller    // This means that this class is a Controller

public class FileAttachmentController {

    @Autowired
    private Helper helper;

    @Autowired
    // This means to get the bean called userRepository which is auto-generated by Spring, we will use it to handle the data
    private FileAttachmentRepository fileAttachmentRepository;

    @Autowired
    private TaskRepository taskRepository;

    @RequestMapping(value = "/tasks/{id}/attachments", method = RequestMethod.GET, produces = "application/json")
    public @ResponseBody
    String getAttachedFilesForTask(HttpServletRequest request, HttpServletResponse response) {

        JsonObject jsonObject = new JsonObject();

        //Write add file code here

        String header = request.getHeader("Authorization");
        String taskId = request.getRequestURI().split("/")[2];
        if (header != null) {

            int userID = helper.GetUserDetails(header);

            if (userID > -1) {

                if (taskId != "") {
                    Task task = taskRepository.findOne(taskId);
                    if (task.getUserId() == userID) {

                        ArrayList<String> fileList = helper.getFileList(taskId);

                        if (fileList == null) {
                            jsonObject.addProperty("message", "No file exists.");
                            return jsonObject.toString();
                        } else {
                            for (String filePath : fileList) {
                                jsonObject.addProperty("message", "File attached to the task " + filePath);
                            }
                            return jsonObject.toString();
                        }
                    } else {
                        response.setStatus(HttpServletResponse.SC_FORBIDDEN);
                        jsonObject.addProperty("message", "You are not allowed to perform this activity.");
                        return jsonObject.toString();
                    }
                }
                response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                jsonObject.addProperty("message", "Invalid Task Id.");
                return jsonObject.toString();
            }
        } else {
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            jsonObject.addProperty("message", "You are not authorized to perform this activity");
        }
        return jsonObject.toString();

    }

    @RequestMapping(value = "/tasks/{id}/attachments", method = RequestMethod.POST, produces = "application/json")
    public @ResponseBody
    String attachFileToTask(HttpServletRequest request, HttpServletResponse response, @RequestParam("file") MultipartFile theFile) {

        System.out.println("I am here");
        JsonObject jsonObject = new JsonObject();
        String header = request.getHeader("Authorization");
        if (header != null && header.contains("Basic")) {
            String[] credentialValues = decode(header);

            User userExists = userService.findUserByEmail(credentialValues[0]);
            if (userExists != null) {
                BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();

                if (encoder.matches(credentialValues[1], userExists.getPassword()) || credentialValues[1].equals(userExists.getPassword())) {
                    Task task = taskRepository.findOne(taskId);

                    if (task.getUser().getId() == userExists.getId()) {
                        if (task != null) {

                            if (files.length != 0) {
                                try {
                                    String uploadsDir = "/uploads/";
                                    String realPathtoUploads = request.getServletContext().getRealPath(uploadsDir);
                                    if (!new File(realPathtoUploads).exists()) {
                                        new File(realPathtoUploads).mkdir();
                                    }


                                    for (MultipartFile file : files) {
                                        String orgName = file.getOriginalFilename();
                                        String filePath = realPathtoUploads + orgName;

                                        File dest = new File(filePath);
                                        file.transferTo(dest);
                                        String key = Instant.now().getEpochSecond() + "_" + dest.getName();
                                        GeneratePresignedUrlRequest generatePresignedUrlRequest = new GeneratePresignedUrlRequest(bucketName, key);
                                        generatePresignedUrlRequest.setMethod(HttpMethod.GET);
                                        generatePresignedUrlRequest.setExpiration(DateTime.now().plusDays(4).toDate());

                                        URL signedUrl = s3Client.generatePresignedUrl(generatePresignedUrlRequest);

                                        FileUpload fileUpload = new FileUpload();
                                        fileUpload.setFilePath(signedUrl.toString());
                                        fileUpload.setTask(task);
                                        fileUploadRepository.save(fileUpload);

                                        s3ServiceImpl.uploadFile(key, dest);


                                    }

                                    if (files.length > 1) {
                                        jsonObject.addProperty("message", "Files added successfully");
                                    } else {
                                        jsonObject.addProperty("message", "File added successfully");
                                    }

                                    response.setStatus(HttpServletResponse.SC_CREATED);
                                } catch (Exception e) {
                                    System.out.println(e);
                                }

                            } else System.out.println("******************File empty***************");


                        } else {
                            jsonObject.addProperty("message", "No task found with the given task id");
                        }
                    } else {
                        jsonObject.addProperty("message", "unauthorized user accessing the task");
                    }

                } else
                    jsonObject.addProperty("message", "Incorrect credentials");
            } else {
                jsonObject.addProperty("message", "Incorrect credentials");
            }
        } else {
            jsonObject.addProperty("message", "You are not logged in !!");
        }
        return jsonObject.toString();


    }

    @RequestMapping(value = "/tasks/{id}/attachments/{idAttachments}", method = RequestMethod.DELETE, produces = "application/json")
    public @ResponseBody
    String deleteFile(HttpServletRequest request, HttpServletResponse response) {

        JsonObject jsonObject = new JsonObject();
        String header = request.getHeader("Authorization");
        if (header != null && header.contains("Basic")) {
            String[] credentialValues = decode(header);

            User userExists = userService.findUserByEmail(credentialValues[0]);
            if (userExists != null) {
                BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();

                if (encoder.matches(credentialValues[1], userExists.getPassword()) || credentialValues[1].equals(userExists.getPassword())) {
                    Task task = taskRepository.findOne(taskId);

                    if (task.getUser().getId() == userExists.getId()) {
                        if (task != null) {

                            List<FileUpload> attachments = task.getFiles();

                            FileUpload deleteFileUpload = new FileUpload();

                            for (FileUpload fu : attachments) {

                                if (fu.getFileId().equals(idAttachment))
                                    deleteFileUpload = fu;

                            }

                            if (deleteFileUpload != null) {

                                File deleteFile = new File(deleteFileUpload.getFilePath());
                                deleteFile.delete();

                                FileUpload deleteFileUploadDb = fileUploadRepository.findOne(deleteFileUpload.getFileId());

                                fileUploadRepository.delete(deleteFileUploadDb);

                                jsonObject.addProperty("message", "File deleted successfully");
                                response.setStatus(HttpServletResponse.SC_NO_CONTENT);


                            } else {
                                jsonObject.addProperty("message", "No attachment found with the given attachment id");
                            }

                        } else {
                            jsonObject.addProperty("message", "No task found with the given task id");
                        }
                    } else {
                        jsonObject.addProperty("message", "unauthorized user accessing the task");
                    }


                } else
                    jsonObject.addProperty("message", "Incorrect credentials");
            } else {
                jsonObject.addProperty("message", "Incorrect credentials");
            }
        } else {
            jsonObject.addProperty("message", "You are not logged in !!");
        }
        return jsonObject.toString();
    }


    public String[] decode(String header){
        assert header.substring(0, 6).equals("Basic");
        String basicAuthEncoded = header.substring(6);
        String basicAuthAsString = new String(Base64.getDecoder().decode(basicAuthEncoded.getBytes()));
        final String[] credentialValues = basicAuthAsString.split(":", 2);
        return  credentialValues;
    }
}
