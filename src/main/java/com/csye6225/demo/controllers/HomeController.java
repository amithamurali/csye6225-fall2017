/**
 * Amitha_Murali, 001643826, murali.a@husky.neu.edu
 * Jyoti Sharma, 001643410, sharma.j@husky.neu.edu
 * Surabhi Patil, 001251860, patil.sur@husky.neu.edu
 **/
package com.csye6225.demo.controllers;


import com.csye6225.demo.helpers.Helper;
import com.csye6225.demo.dao.UserRepository;
import com.google.gson.JsonObject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import com.csye6225.demo.entities.User;
import java.util.Date;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.Base64;

@Controller
public class HomeController {


  @Autowired
  // This means to get the bean called userRepository which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  @Autowired
  private Helper helper;

  private final static Logger logger = LoggerFactory.getLogger(HomeController.class);

  @RequestMapping(value = "/", method = RequestMethod.GET, produces = "application/json")
  @ResponseBody
  public String welcome(HttpServletRequest request, HttpServletResponse response) {

    JsonObject jsonObject = new JsonObject();

       //This is the logic to fetch user password from the authorization header value by removing "Basic" keyword, decoding and splitting with :
       String header = request.getHeader("Authorization");
       if(header !=null && header.contains("Basic"))
       {
       assert header.substring(0, 6).equals("Basic");
       String basicAuthEncoded = header.substring(6);
       String basicAuthAsString = new String(Base64.getDecoder().decode(basicAuthEncoded.getBytes()));


      final String[] credentialValues = basicAuthAsString.split(":", 2);
      //If user exists in DB , return the user object.
      User user = helper.validateUser(credentialValues[0], credentialValues[1]);

      if (user == null) {
        jsonObject.addProperty("message", "Invalid credentials.Try again!!!");
      } else {
        jsonObject.addProperty("message", "Hi, you have been successfully logged in. current time is " + new Date().toString());
      }
    }

   else
   {
        jsonObject.addProperty("message", "You are not logged in!!!");
   }

    return jsonObject.toString();

  }

  @RequestMapping(value = "/test", method = RequestMethod.GET, produces = "application/json")
  @ResponseBody
  public String test() {
    JsonObject jsonObject = new JsonObject();
    jsonObject.addProperty("message", "authorized for /test");
    return jsonObject.toString();
  }

  @RequestMapping(value = "/testPost", method = RequestMethod.POST, produces = "application/json")
  @ResponseBody
  public String testPost() {
    JsonObject jsonObject = new JsonObject();
    jsonObject.addProperty("message", "authorized for /testPost");
    return jsonObject.toString();
  }

}
