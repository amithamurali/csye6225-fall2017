/**
 * Surabhi Patil, 001251860, patil.sur@husky.neu.edu
 * Amitha_Murali, 001643826, murali.a@husky.neu.edu
 * Jyoti Sharma, 001643410, sharma.j@husky.neu.edu
 **/

package com.csye6225.demo.controllers;

import com.csye6225.demo.dao.FileAttachmentRepository;
import com.csye6225.demo.dao.TaskRepository;
import com.csye6225.demo.entities.FileAttachment;
import com.csye6225.demo.entities.Task;
import com.csye6225.demo.helpers.Helper;
import com.google.gson.JsonObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.ArrayList;

@Controller    // This means that this class is a Controller

public class TaskController {

    @Autowired
    // This means to get the bean called userRepository which is auto-generated by Spring, we will use it to handle the data
    private TaskRepository taskRepository;


    @Autowired
    private FileAttachmentRepository fileAttachmentRepository;

    @Autowired
    private Helper helper;

    @RequestMapping(value = "/tasks", method = RequestMethod.POST, produces = "application/json")
    @ResponseBody
    public String addTask(@RequestBody Task userTask, HttpServletRequest request, HttpServletResponse response) {

        JsonObject jsonObject = new JsonObject();

        //String taskDescription = request.getParameter("description");

        if(userTask.getDescription().length() < 4096) {
            String header = request.getHeader("Authorization");
            if (header != null) {

                int userID;
                userID = helper.GetUserDetails(header);

                if (userID > -1) {

                    //userTask.setId();
                    userTask.setUserId(userID);

                    taskRepository.save(userTask);


                    jsonObject.addProperty("message", "Task has been created successfully for the User.");
                    jsonObject.addProperty("userId", userTask.getUserId());
                    jsonObject.addProperty("taskUuid", userTask.getId());
                    jsonObject.addProperty("taskDescription", userTask.getDescription());
                    return jsonObject.toString();
                }
                else
                {
                    response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
                    jsonObject.addProperty("message", "You are not authorized to perform this activity");
                }
            }
            else{
                response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
                jsonObject.addProperty("message", "You are not authorized to perform this activity");
            }
        }
        else {
            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
            jsonObject.addProperty("message", "Description exceeds maximum number of allowed characters.");
        }

        return jsonObject.toString();
    }

    @RequestMapping(value="/tasks/{id}",method= RequestMethod.PUT,produces="application/json")
    public @ResponseBody String updateTask (@RequestBody Task userTask, HttpServletRequest request, HttpServletResponse response){

        JsonObject jsonObject = new JsonObject();

        String taskId = request.getRequestURI().split("/")[2];
        String taskDescription = request.getParameter("description");

        String header = request.getHeader("Authorization");
        if(header != null) {

            int userID = helper.GetUserDetails(header);

            if (userID > -1) {

                Task task = taskRepository.findOne(taskId);
                if(task != null) {
                    if(task.getUserId() == userID) {
                        task.setDescription(userTask.getDescription());
                        taskRepository.save(task);
                        jsonObject.addProperty("message", "Task updated successfully.");
                        return jsonObject.toString();
                    }
                    else{
                        response.setStatus(HttpServletResponse.SC_FORBIDDEN);
                        jsonObject.addProperty("message", "You are not authorized to perform this activity");
                    }
                }
                else{
                    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                    jsonObject.addProperty("message", "This is a bad request");
                }

            }
            else{
                response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
                jsonObject.addProperty("message", "You are not authorized to perform this activity");
            }
        }
        else{
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            jsonObject.addProperty("message", "You are not authorized to perform this activity");
        }


        return jsonObject.toString();

    }


    @RequestMapping(value="/tasks/{id}",method= RequestMethod.DELETE,produces="application/json")
    public @ResponseBody String deleteTask (HttpServletRequest request, HttpServletResponse response) {

        JsonObject jsonObject = new JsonObject();
        String taskId = request.getRequestURI().split("/")[2];
        String header = request.getHeader("Authorization");
        if(header != null) {

            int userID = helper.GetUserDetails(header);

            if (userID > -1) {

                Task task = taskRepository.findOne(taskId);
                if(task != null) {
                    if(task.getUserId() == userID) {

                        ArrayList<String> fileIDs = helper.getFileIDs( taskId );
                        for (String id : fileIDs    ) {
                            FileAttachment file = fileAttachmentRepository.findOne(id ) ;
                            if(file != null) {
                                fileAttachmentRepository.delete( file );
                            }

                        }
                        taskRepository.delete(task);
                        jsonObject.addProperty("message", "Task deleted successfully.");
                        return jsonObject.toString();
                    }
                    else{
                        response.setStatus(HttpServletResponse.SC_FORBIDDEN);
                        jsonObject.addProperty("message", "You are not authorized to perform this activity");
                    }

                }
                else{
                    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                    jsonObject.addProperty("message", "This is a bad request");
                }

            }
            else{
                response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
                jsonObject.addProperty("message", "You are not authorized to perform this activity");
            }
        }
        else{
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            jsonObject.addProperty("message", "You are not authorized to perform this activity");
        }

        return jsonObject.toString();

    }


}